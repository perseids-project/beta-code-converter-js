{"version":3,"sources":["components/Converter/index.js","components/Converter/Converter.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js","components/Converter/Converter.module.css","components/App/App.module.css"],"names":["Converter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","beta","unicode","handleBetaChange","bind","assertThisInitialized","handleUnicodeChange","event","value","target","setState","betaCodeToGreek","greekToBetaCode","_this$state","react_default","a","createElement","Fragment","className","concat","styles","row","textarea","type","placeholder","autoComplete","autoCorrect","autoCapitalize","spellCheck","onChange","Component","App","BrowserRouter","basename","process","build","role","main","container","Switch","Route","exact","path","component","report","github","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"oTAEeA,cCSb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KANRQ,MAAQ,CACNC,KAAM,GACNC,QAAS,IAMTT,EAAKU,iBAAmBV,EAAKU,iBAAiBC,KAAtBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACxBA,EAAKa,oBAAsBb,EAAKa,oBAAoBF,KAAzBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAJVA,gFAOFc,GAAO,IACdC,EAAUD,EAAME,OAAhBD,MAERZ,KAAKc,SAAS,CACZT,KAAMO,EACNN,QAASS,0BAAgBH,iDAITD,GAAO,IACjBC,EAAUD,EAAME,OAAhBD,MAERZ,KAAKc,SAAS,CACZT,KAAMW,0BAAgBJ,GACtBN,QAASM,qCAIJ,IAAAK,EACmBjB,KAAKI,MAAvBC,EADDY,EACCZ,KAAMC,EADPW,EACOX,QAEd,OACEY,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,yBAAd,+BAMJJ,EAAAC,EAAAC,cAAA,OAAKE,UAAS,OAAAC,OAASC,IAAOC,MAC5BP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eAAd,iBACAJ,EAAAC,EAAAC,cAAA,YACEE,UAAS,GAAAC,OAAKC,IAAOE,SAAZ,0BACTC,KAAK,OACLC,YAAY,uFACZC,aAAa,MACbC,YAAY,MACZC,eAAe,MACfC,WAAW,QACXC,SAAUjC,KAAKU,oBACfE,MAAON,KAIXY,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eAAd,aACAJ,EAAAC,EAAAC,cAAA,YACEE,UAAS,GAAAC,OAAKC,IAAOE,SAAZ,0BACTC,KAAK,OACLC,YAAY,2BACZC,aAAa,MACbC,YAAY,MACZC,eAAe,MACfC,WAAW,QACXC,SAAUjC,KAAKO,iBACfK,MAAOP,cAvEG6B,aCHTC,ECMH,kBACVjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAQC,SAAUC,cAChBpB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACmB,EAAA,eAAD,kCAGArB,EAAAC,EAAAC,cAAA,QAAMoB,KAAK,OAAOlB,UAAWE,IAAOiB,MAClCvB,EAAAC,EAAAC,cAAA,OAAKE,UAAS,aAAAC,OAAeC,IAAOkB,YAClCxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpD,OAIvCuB,EAAAC,EAAAC,cAACmB,EAAA,eAAD,CACES,OAAO,mDACPC,OAAO,+DCXKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,mFCRNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCElInBC,EAAAC,QAAA,CAAkB1C,IAAA,uBAAAC,SAAA,gDCAlBwC,EAAAC,QAAA,CAAkB1B,KAAA,kBAAAC,UAAA","file":"static/js/main.71b87717.chunk.js","sourcesContent":["import Converter from './Converter';\n\nexport default Converter;\n","import React, { Component } from 'react';\nimport { greekToBetaCode, betaCodeToGreek } from 'beta-code-js';\n\nimport styles from './Converter.module.css';\n\nclass Converter extends Component {\n  state = {\n    beta: '',\n    unicode: '',\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.handleBetaChange = this.handleBetaChange.bind(this);\n    this.handleUnicodeChange = this.handleUnicodeChange.bind(this);\n  }\n\n  handleBetaChange(event) {\n    const { value } = event.target;\n\n    this.setState({\n      beta: value,\n      unicode: betaCodeToGreek(value),\n    });\n  }\n\n  handleUnicodeChange(event) {\n    const { value } = event.target;\n\n    this.setState({\n      beta: greekToBetaCode(value),\n      unicode: value,\n    });\n  }\n\n  render() {\n    const { beta, unicode } = this.state;\n\n    return (\n      <React.Fragment>\n        <div className=\"row pt-4 mb-3\">\n          <div className=\"col-12 text-center\">\n            <h1 className=\"h3 font-weight-normal\">\n              Greek Beta Code Converter\n            </h1>\n          </div>\n        </div>\n\n        <div className={`row ${styles.row}`}>\n          <div className=\"col-6\">\n            <h4 className=\"text-center\">Greek Unicode</h4>\n            <textarea\n              className={`${styles.textarea} form-control input-lg`}\n              type=\"text\"\n              placeholder=\"μῆνιν ἄειδε θεὰ ...\"\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n              spellCheck=\"false\"\n              onChange={this.handleUnicodeChange}\n              value={unicode}\n            />\n          </div>\n\n          <div className=\"col-6\">\n            <h4 className=\"text-center\">Beta Code</h4>\n            <textarea\n              className={`${styles.textarea} form-control input-lg`}\n              type=\"text\"\n              placeholder=\"mh=nin a)/eide qea\\ ...\"\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n              spellCheck=\"false\"\n              onChange={this.handleBetaChange}\n              value={beta}\n            />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default Converter;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport { PerseidsHeader, PerseidsFooter } from 'perseids-react-components';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport styles from './App.module.css';\n\nimport Converter from '../Converter';\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <React.Fragment>\n      <PerseidsHeader>\n        Greek Beta Code Converter\n      </PerseidsHeader>\n      <main role=\"main\" className={styles.main}>\n        <div className={`container ${styles.container}`}>\n          <Switch>\n            <Route exact path=\"/\" component={Converter} />\n          </Switch>\n        </div>\n      </main>\n      <PerseidsFooter\n        report=\"https://github.com/perseids-project/beta-code-js\"\n        github=\"https://github.com/perseids-project/beta-code-js/issues\"\n      />\n    </React.Fragment>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"typeface-tinos\";\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'perseids-react-components/build/css/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Converter_row__2TQAN\",\"textarea\":\"Converter_textarea__2qcKs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__3Lg8g\",\"container\":\"App_container__eyuZg\"};"],"sourceRoot":""}