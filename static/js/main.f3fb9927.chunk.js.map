{"version":3,"sources":["components/App/App.module.css","components/I18n/I18n.js","components/I18n/index.js","components/Converter/Converter.js","components/Converter/index.js","components/App/App.js","components/App/index.js","serviceWorker.js","index.js","components/Converter/Converter.module.css"],"names":["module","exports","I18n","createI18n","en","header","title","converter","betacode","unicode","smallScreenUnicode","copy","placeholderUnicode","placeholderBetacode","Converter","Component","constructor","props","super","this","state","beta","handleBetaChange","bind","handleUnicodeChange","event","value","target","setState","betaCodeToGreek","greekToBetaCode","render","location","className","t","styles","row","htmlFor","textarea","id","type","placeholder","getTranslation","autoComplete","autoCorrect","autoCapitalize","spellCheck","onChange","button-type","data-clipboard-target","App","basename","process","role","main","container","exact","path","component","report","github","doi","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,KAAO,kBAAkB,UAAY,yB,oKCyBxCC,ICxBAA,EDmBFC,qBAnBG,CAAC,MAEI,CACnBC,GAAI,CACFC,OAAQ,CACNC,MAAO,6BAETC,UAAW,CACTD,MAAO,4BACPE,SAAU,YACVC,QAAS,gBACTC,mBAAoB,UACpBC,KAAM,oBACNC,mBAAoB,uFACpBC,oBAAqB,6B,0DEP3B,MAAMC,UAAkBC,YACtBC,YAAYC,GACVC,MAAMD,GAENE,KAAKC,MAAQ,CACXC,KAAM,GACNZ,QAAS,IAGXU,KAAKG,iBAAmBH,KAAKG,iBAAiBC,KAAKJ,MACnDA,KAAKK,oBAAsBL,KAAKK,oBAAoBD,KAAKJ,MAG3DG,iBAAiBG,GAAQ,MACfC,EAAUD,EAAME,OAAhBD,MAERP,KAAKS,SAAS,CACZP,KAAMK,EACNjB,QAASoB,0BAAgBH,KAI7BF,oBAAoBC,GAAQ,MAClBC,EAAUD,EAAME,OAAhBD,MAERP,KAAKS,SAAS,CACZP,KAAMS,0BAAgBJ,GACtBjB,QAASiB,IAIbK,SAAU,MAAD,EACmBZ,KAAKC,MAAvBC,EADD,EACCA,KAAMZ,EADP,EACOA,QACNuB,EAAab,KAAKF,MAAlBe,SAER,OACE,oCACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,yBACZ,kBAAC,EAAD,CAAMC,EAAE,uBAKd,yBAAKD,UAAS,cAASE,IAAOC,MAC5B,yBAAKH,UAAU,SACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,kBACZ,2BAAOI,QAAQ,sBAAsBJ,UAAU,QAC7C,kBAAC,EAAD,CAAMC,EAAE,oCAId,yBAAKD,UAAU,qBACb,wBAAIA,UAAU,kBACZ,2BAAOI,QAAQ,sBAAsBJ,UAAU,QAC7C,kBAAC,EAAD,CAAMC,EAAE,yBAId,8BACED,UAAS,UAAKE,IAAOG,SAAZ,mDACTC,GAAG,sBACHC,KAAK,OACLC,YAAavC,EAAKwC,eAAeV,EAAU,gCAC3CW,aAAa,MACbC,YAAY,MACZC,eAAe,MACfC,WAAW,QACXC,SAAU5B,KAAKK,oBACfE,MAAOjB,KAIX,yBAAKwB,UAAU,SACb,wBAAIA,UAAU,kBACZ,2BAAOI,QAAQ,kBAAkBJ,UAAU,QACzC,kBAAC,EAAD,CAAMC,EAAE,yBAGZ,8BACED,UAAS,UAAKE,IAAOG,SAAZ,oDACTC,GAAG,kBACHC,KAAK,OACLC,YAAavC,EAAKwC,eAAeV,EAAU,iCAC3CW,aAAa,MACbC,YAAY,MACZC,eAAe,MACfC,WAAW,QACXC,SAAU5B,KAAKG,iBACfI,MAAOL,MAIb,yBAAKY,UAAU,OACb,yBAAKA,UAAU,SACb,kBAAC,IAAD,CACEe,cAAY,SACZf,UAAU,sCACVgB,wBAAsB,6BAEtB,kBAAC,EAAD,CAAMf,EAAE,qBAGZ,yBAAKD,UAAU,SACb,kBAAC,IAAD,CACEe,cAAY,SACZf,UAAU,sCACVgB,wBAAsB,8BAEtB,kBAAC,EAAD,CAAMf,EAAE,wBAePpB,ICrIAA,EDqIAA,EEvGAoC,IC9BAA,EDQH,IACV,kBAAC,gBAAD,CAAQC,SAAUC,cAChB,oCACE,kBAAC,iBAAD,KACE,kBAAC,EAAD,CAAMlB,EAAE,kBAEV,0BAAMmB,KAAK,OAAOpB,UAAWE,IAAOmB,MAClC,yBAAKrB,UAAS,oBAAeE,IAAOoB,YAClC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5C,OAIvC,kBAAC,iBAAD,CACE6C,OAAO,mDACPC,OAAO,0DACPC,IAAI,6BEdZ,MAAMC,EAAcC,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAKC,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBxD,QACfkD,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAMC,IACLL,QAAQK,MAAM,4CAA6CA,K,wBCtFjEC,IAASvD,OAAO,kBAAC,EAAD,MAASwD,SAASC,eAAe,SDY1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIrC,aAAwBY,OAAOhC,SAAS0D,MACpDC,SAAW3B,OAAOhC,SAAS2D,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,KAC9B,MAAMxB,EAAK,UAAMhB,aAAN,sBAEPU,IAgEV,SAAiCM,EAAOC,GAEtCwB,MAAMzB,GACHK,KAAKqB,IAEJ,MAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,KAAKC,IACjCA,EAAa2B,aAAa5B,KAAK,KAC7BT,OAAOhC,SAASsE,aAKpBnC,EAAgBC,EAAOC,KAG1Be,MAAM,KACLJ,QAAQC,IACN,mEArFAsB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,KAAK,KACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MCnC/BE,I,kBCdAvE,EAAOC,QAAU,CAAC,IAAM,uBAAuB,SAAW,+B","file":"static/js/main.f3fb9927.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__w13HL\",\"container\":\"App_container__16xz_\"};","import { createI18n } from 'react-router-i18n';\n\nconst locales = ['en'];\n\nconst translations = {\n  en: {\n    header: {\n      title: 'Greek Beta Code Converter',\n    },\n    converter: {\n      title: 'Greek Beta Code Converter',\n      betacode: 'Beta Code',\n      unicode: 'Greek Unicode',\n      smallScreenUnicode: 'Unicode',\n      copy: 'Copy to Clipboard',\n      placeholderUnicode: 'μῆνιν ἄειδε θεὰ ...',\n      placeholderBetacode: 'mh=nin a)/eide qea ...',\n    },\n  },\n};\n\nconst I18n = createI18n(\n  locales,\n  translations,\n);\n\nexport default I18n;\n","import I18n from './I18n';\n\nexport default I18n;\n","import React, { Component } from 'react';\nimport { shape, string } from 'prop-types';\nimport { greekToBetaCode, betaCodeToGreek } from 'beta-code-js';\nimport Clipboard from 'react-clipboard.js';\n\nimport I18n from '../I18n';\n\nimport styles from './Converter.module.css';\n\nclass Converter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      beta: '',\n      unicode: '',\n    };\n\n    this.handleBetaChange = this.handleBetaChange.bind(this);\n    this.handleUnicodeChange = this.handleUnicodeChange.bind(this);\n  }\n\n  handleBetaChange(event) {\n    const { value } = event.target;\n\n    this.setState({\n      beta: value,\n      unicode: betaCodeToGreek(value),\n    });\n  }\n\n  handleUnicodeChange(event) {\n    const { value } = event.target;\n\n    this.setState({\n      beta: greekToBetaCode(value),\n      unicode: value,\n    });\n  }\n\n  render() {\n    const { beta, unicode } = this.state;\n    const { location } = this.props;\n\n    return (\n      <>\n        <div className=\"row pt-4 mb-3\">\n          <div className=\"col-12 text-center\">\n            <h1 className=\"h3 font-weight-normal\">\n              <I18n t=\"converter.title\" />\n            </h1>\n          </div>\n        </div>\n\n        <div className={`row ${styles.row}`}>\n          <div className=\"col-6\">\n            <div className=\"d-block d-sm-none\">\n              <h2 className=\"text-center h4\">\n                <label htmlFor=\"greek-unicode-input\" className=\"mb-0\">\n                  <I18n t=\"converter.smallScreenUnicode\" />\n                </label>\n              </h2>\n            </div>\n            <div className=\"d-none d-sm-block\">\n              <h2 className=\"text-center h4\">\n                <label htmlFor=\"greek-unicode-input\" className=\"mb-0\">\n                  <I18n t=\"converter.unicode\" />\n                </label>\n              </h2>\n            </div>\n            <textarea\n              className={`${styles.textarea} form-control input-lg clipboard-target-unicode`}\n              id=\"greek-unicode-input\"\n              type=\"text\"\n              placeholder={I18n.getTranslation(location, 'converter.placeholderUnicode')}\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n              spellCheck=\"false\"\n              onChange={this.handleUnicodeChange}\n              value={unicode}\n            />\n          </div>\n\n          <div className=\"col-6\">\n            <h2 className=\"text-center h4\">\n              <label htmlFor=\"beta-code-input\" className=\"mb-0\">\n                <I18n t=\"converter.betacode\" />\n              </label>\n            </h2>\n            <textarea\n              className={`${styles.textarea} form-control input-lg clipboard-target-betacode`}\n              id=\"beta-code-input\"\n              type=\"text\"\n              placeholder={I18n.getTranslation(location, 'converter.placeholderBetacode')}\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n              spellCheck=\"false\"\n              onChange={this.handleBetaChange}\n              value={beta}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-6\">\n            <Clipboard\n              button-type=\"button\"\n              className=\"btn btn-block btn-success mb-4 mt-2\"\n              data-clipboard-target=\".clipboard-target-unicode\"\n            >\n              <I18n t=\"converter.copy\" />\n            </Clipboard>\n          </div>\n          <div className=\"col-6\">\n            <Clipboard\n              button-type=\"button\"\n              className=\"btn btn-block btn-success mb-4 mt-2\"\n              data-clipboard-target=\".clipboard-target-betacode\"\n            >\n              <I18n t=\"converter.copy\" />\n            </Clipboard>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nConverter.propTypes = {\n  location: shape({\n    search: string.isRequired,\n  }).isRequired,\n};\n\nexport default Converter;\n","import Converter from './Converter';\n\nexport default Converter;\n","import React from 'react';\nimport { PerseidsHeader, PerseidsFooter } from 'perseids-react-components';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport I18n from '../I18n';\n\nimport styles from './App.module.css';\n\nimport Converter from '../Converter';\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <>\n      <PerseidsHeader>\n        <I18n t=\"header.title\" />\n      </PerseidsHeader>\n      <main role=\"main\" className={styles.main}>\n        <div className={`container ${styles.container}`}>\n          <Switch>\n            <Route exact path=\"/\" component={Converter} />\n          </Switch>\n        </div>\n      </main>\n      <PerseidsFooter\n        report=\"https://github.com/perseids-project/beta-code-js\"\n        github=\"https://github.com/perseids-project/beta-code-js/issues\"\n        doi=\"10.5281/zenodo.3967309\"\n      />\n    </>\n  </Router>\n);\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'typeface-tinos';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'perseids-react-components/build/css/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Converter_row__2MmxD\",\"textarea\":\"Converter_textarea__Yz5Gt\"};"],"sourceRoot":""}